{"ast":null,"code":"import { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\nimport { publicRequest, userRequest } from \"../requestMethods\";\nimport { getProductFailure, getProductStart, getProductSuccess, deleteProductFailure, deleteProductStart, deleteProductSuccess, updateProductFailure, updateProductStart, updateProductSuccess, addProductFailure, addProductStart, addProductSuccess } from \"./productRedux\";\n// import axios from 'axios';\n// import { getProductStart, getProductSuccess, getProductFailure } from './productRedux';\n\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n  try {\n    const res = await publicRequest.post(\"/login\", user);\n    dispatch(loginSuccess(res.data));\n    console.log(\"login successfull!\");\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\n// export const login = async (dispatch, user) => {\n//   dispatch(loginStart());\n//   try {\n//     const res = await publicRequest.post(\"/login\", user);\n//     dispatch(loginSuccess(res.data));\n//   } catch (err) {\n//     dispatch(loginFailure());\n//   }\n// };\n\nexport const getProducts = async dispatch => {\n  dispatch(getProductStart());\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\n// export const getProducts = async (dispatch) => {\n//   dispatch(getProductStart());\n//   try {\n//     const res = await axios.get('http://localhost:5000/api/products');\n//     dispatch(getProductSuccess(res.data));\n//   } catch (err) {\n//     console.error(err);\n//     dispatch(getProductFailure());\n//   }\n// };\n\n// export const deleteProduct = async (id, dispatch) => {\n//   dispatch(deleteProductStart());\n//   try {\n//     // const res = await userRequest.delete(`/products/${id}`);\n//     dispatch(deleteProductSuccess(id));\n//   } catch (err) {\n//     dispatch(deleteProductFailure());\n//   }\n// };\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n  try {\n    const res = await userRequest.delete(`/products/${id}`); // Assuming the endpoint is '/products/:id'\n    // Dispatch the success action if the deletion was successful\n    dispatch(deleteProductSuccess(id));\n    return res.data; // Optional: Return the response data if needed\n  } catch (error) {\n    // Dispatch the failure action if an error occurs\n    dispatch(deleteProductFailure());\n    throw new Error(\"Error deleting product:\", error);\n  }\n};\n\n// export const updateProduct = async (id, product, dispatch) => {\n//   dispatch(updateProductStart());\n//   try {\n//     // update\n//     dispatch(updateProductSuccess({ id, product }));\n//   } catch (err) {\n//     dispatch(updateProductFailure());\n//     console.log(\"updating error\", err)\n//   }\n// };\nexport const updateProduct = async (id, product, dispatch) => {\n  try {\n    const res = await userRequest.put(`/products/${id}`, product); // Assuming the endpoint is '/products/:id'\n    // Dispatch the success action if the update was successful\n    dispatch(updateProductSuccess({\n      id,\n      product: res.data\n    }));\n    return res.data; // Optional: Return the updated product data if needed\n  } catch (error) {\n    // Dispatch the failure action if an error occurs\n    dispatch(updateProductFailure());\n    throw new Error(\"Error updating product:\", error);\n  }\n};\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};","map":{"version":3,"names":["loginFailure","loginStart","loginSuccess","publicRequest","userRequest","getProductFailure","getProductStart","getProductSuccess","deleteProductFailure","deleteProductStart","deleteProductSuccess","updateProductFailure","updateProductStart","updateProductSuccess","addProductFailure","addProductStart","addProductSuccess","login","dispatch","user","res","post","data","console","log","err","getProducts","get","deleteProduct","id","delete","error","Error","updateProduct","product","put","addProduct"],"sources":["C:/Users/91831/Desktop/viva1/BooksellingApp/admin/src/redux/apiCalls.js"],"sourcesContent":["import { loginFailure, loginStart, loginSuccess } from \"./userRedux\";\nimport { publicRequest, userRequest } from \"../requestMethods\";\nimport {\n  getProductFailure,\n  getProductStart,\n  getProductSuccess,\n  deleteProductFailure,\n  deleteProductStart,\n  deleteProductSuccess,\n  updateProductFailure,\n  updateProductStart,\n  updateProductSuccess,\n  addProductFailure,\n  addProductStart,\n  addProductSuccess,\n} from \"./productRedux\";\n// import axios from 'axios';\n// import { getProductStart, getProductSuccess, getProductFailure } from './productRedux';\n\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n  try {\n    const res = await publicRequest.post(\"/login\", user);\n    dispatch(loginSuccess(res.data));\n    console.log(\"login successfull!\")\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\n// export const login = async (dispatch, user) => {\n//   dispatch(loginStart());\n//   try {\n//     const res = await publicRequest.post(\"/login\", user);\n//     dispatch(loginSuccess(res.data));\n//   } catch (err) {\n//     dispatch(loginFailure());\n//   }\n// };\n\n\n\n\n\nexport const getProducts = async (dispatch) => {\n  dispatch(getProductStart());\n  try {\n    const res = await publicRequest.get(\"/products\");\n    dispatch(getProductSuccess(res.data));\n  } catch (err) {\n    dispatch(getProductFailure());\n  }\n};\n// export const getProducts = async (dispatch) => {\n//   dispatch(getProductStart());\n//   try {\n//     const res = await axios.get('http://localhost:5000/api/products');\n//     dispatch(getProductSuccess(res.data));\n//   } catch (err) {\n//     console.error(err);\n//     dispatch(getProductFailure());\n//   }\n// };\n\n\n\n// export const deleteProduct = async (id, dispatch) => {\n//   dispatch(deleteProductStart());\n//   try {\n//     // const res = await userRequest.delete(`/products/${id}`);\n//     dispatch(deleteProductSuccess(id));\n//   } catch (err) {\n//     dispatch(deleteProductFailure());\n//   }\n// };\nexport const deleteProduct = async (id, dispatch) => {\n  dispatch(deleteProductStart());\n  try {\n    const res = await userRequest.delete(`/products/${id}`); // Assuming the endpoint is '/products/:id'\n    // Dispatch the success action if the deletion was successful\n    dispatch(deleteProductSuccess(id));\n    return res.data; // Optional: Return the response data if needed\n  } catch (error) {\n    // Dispatch the failure action if an error occurs\n    dispatch(deleteProductFailure());\n    throw new Error(\"Error deleting product:\", error);\n  }\n};\n\n// export const updateProduct = async (id, product, dispatch) => {\n//   dispatch(updateProductStart());\n//   try {\n//     // update\n//     dispatch(updateProductSuccess({ id, product }));\n//   } catch (err) {\n//     dispatch(updateProductFailure());\n//     console.log(\"updating error\", err)\n//   }\n// };\nexport const updateProduct = async (id, product, dispatch) => {\n  try {\n    const res = await userRequest.put(`/products/${id}`, product); // Assuming the endpoint is '/products/:id'\n    // Dispatch the success action if the update was successful\n    dispatch(updateProductSuccess({ id, product: res.data }));\n    return res.data; // Optional: Return the updated product data if needed\n  } catch (error) {\n    // Dispatch the failure action if an error occurs\n    dispatch(updateProductFailure());\n    throw new Error(\"Error updating product:\", error);\n  }\n};\n\n\nexport const addProduct = async (product, dispatch) => {\n  dispatch(addProductStart());\n  try {\n    const res = await userRequest.post(`/products`, product);\n    dispatch(addProductSuccess(res.data));\n  } catch (err) {\n    dispatch(addProductFailure());\n  }\n};\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}